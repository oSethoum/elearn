datasource db {
   url      = env("DATABASE_URL")
   provider = "sqlite"
}

generator client {
   provider = "prisma-client-js"
}

generator typegraphql {
   provider = "typegraphql-prisma"
   output   = "../prisma/generated/type-graphql"
}

model User {
   id          Int      @id @default(autoincrement())
   firstName   String
   lastName    String
   username    String
   phone       String
   email       String
   /// @TypeGraphQL.omit(output: true)
   password    String
   role        String
   disabled    Boolean
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
   pictureLink String
   teacher     Teacher?
   admin       Admin?
   student     Student?

   @@map("users")
}

model Student {
   id          Int          @id @default(autoincrement())
   grade       Int
   classroom   Classroom?   @relation(fields: [classroomId], references: [id])
   classroomId Int?
   user        User         @relation(fields: [userId], references: [id])
   userId      Int          @unique
   submissions Submission[]

   @@map("students")
}

model Teacher {
   id      Int      @id @default(autoincrement())
   grade   String
   user    User     @relation(fields: [userId], references: [id])
   userId  Int      @unique
   courses Course[]

   @@map("teachers")
}

model Admin {
   id     Int    @id @default(autoincrement())
   role   String
   user   User   @relation(fields: [userId], references: [id])
   userId Int    @unique

   @@map("admins")
}

model Departement {
   id     Int     @id @default(autoincrement())
   name   String
   topics Topic[]

   @@map("departements")
}

model Topic {
   id            Int          @id @default(autoincrement())
   name          String
   grades        Int
   departmenet   Departement? @relation(fields: [departmenetId], references: [id])
   departmenetId Int?
   courses       Course[]
   classrooms    Classroom[]

   @@map("topics")
}

model Course {
   id          Int          @id @default(autoincrement())
   title       String
   enabled     Boolean
   createdAt   DateTime     @default(now())
   updatedAt   DateTime     @updatedAt
   topic       Topic?       @relation(fields: [topicId], references: [id])
   topicId     Int?
   assignments Assignment[]
   teacher     Teacher?     @relation(fields: [teacherId], references: [id])
   teacherId   Int?
   meetings    Meeting[]
   content     Content      @relation(fields: [contentId], references: [id])
   contentId   Int          @unique

   @@map("courses")
}

model Assignment {
   id          Int          @id @default(autoincrement())
   deadline    DateTime
   createdAt   DateTime     @default(now())
   updatedAt   DateTime     @updatedAt
   course      Course?      @relation(fields: [courseId], references: [id])
   courseId    Int?
   submissions Submission[]
   content     Content      @relation(fields: [contentId], references: [id])
   contentId   Int          @unique

   @@map("assignments")
}

model Classroom {
   id        Int       @id @default(autoincrement())
   name      String
   createdAt DateTime  @default(now())
   updatedAt DateTime  @updatedAt
   students  Student[]
   topic     Topic?    @relation(fields: [topicId], references: [id])
   topicId   Int?

   @@map("classrooms")
}

model Meeting {
   id        Int      @id @default(autoincrement())
   title     String
   start     DateTime
   duration  DateTime
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   course    Course?  @relation(fields: [courseId], references: [id])
   courseId  Int?

   @@map("meetings")
}

model Submission {
   id            Int         @id @default(autoincrement())
   createdAt     DateTime    @default(now())
   updatedAt     DateTime    @updatedAt
   student       Student?    @relation(fields: [studentId], references: [id])
   studentId     Int?
   assignement   Assignment? @relation(fields: [assignementId], references: [id])
   assignementId Int?
   content       Content     @relation(fields: [contentId], references: [id])
   contentId     Int         @unique

   @@map("submissions")
}

model Content {
   id          Int         @id @default(autoincrement())
   createdAt   DateTime    @default(now())
   updatedAt   DateTime    @updatedAt
   content     String
   files       File[]
   assignments Assignment?
   submissions Submission?
   courses     Course?

   @@map("contents")
}

model File {
   id        Int      @id @default(autoincrement())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   type      String
   link      String
   content   Content? @relation(fields: [contentId], references: [id])
   contentId Int?

   @@map("files")
}
