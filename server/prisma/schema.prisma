datasource db {
	url = env("DATABASE_URL")
	provider = "sqlite"
}

generator client {
	provider = "prisma-client-js"
}

generator typegraphql {
	provider = "typegraphql-prisma"
	output   = "../prisma/generated/type-graphql"
}

model User {
	id Int @id @default(autoincrement())
	username String 
	email String 
	/// @TypeGraphQL.omit(output: true)
	password String 
	role String 
	disabled Boolean 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	teacher Teacher?
	admin Admin?
	student Student?
}

model Student {
	id Int @id @default(autoincrement())
	grade Int 
	firstName String 
	lastName String 
	user User @relation(fields:[userId], references:[id])
	userId Int
	submissions Submission[]
	topic Topic? @relation(fields:[topicId], references:[id])
	topicId Int?
}

model Teacher {
	id Int @id @default(autoincrement())
	firstName String 
	lastName String 
	user User @relation(fields:[userId], references:[id])
	userId Int
	courses Course[]
}

model Admin {
	id Int @id @default(autoincrement())
	lastName String 
	firstName String 
	user User @relation(fields:[userId], references:[id])
	userId Int
}

model Department {
	id Int @id @default(autoincrement())
	name String 
	topics Topic[]
}

model Topic {
	id Int @id @default(autoincrement())
	name String 
	grades Int 
	department Department? @relation(fields:[departmentId], references:[id])
	departmentId Int?
	courses Course[]
	students Student[]
}

model Course {
	id Int @id @default(autoincrement())
	title String 
	grade Int 
	description String? 
	published Boolean @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	topic Topic? @relation(fields:[topicId], references:[id])
	topicId Int?
	assignments Assignment[]
	teacher Teacher? @relation(fields:[teacherId], references:[id])
	teacherId Int?
	meetings Meeting[]
	lessons Lesson[]
}

model Assignment {
	id Int @id @default(autoincrement())
	deadline DateTime 
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	published Boolean? @default(false)
	course Course? @relation(fields:[courseId], references:[id])
	courseId Int?
	submissions Submission[]
	content Content @relation(fields:[contentId], references:[id])
	contentId Int
}

model Meeting {
	id Int @id @default(autoincrement())
	title String 
	start DateTime 
	duration DateTime 
	createdAt DateTime @default(now())
	link String? 
	updatedAt DateTime @updatedAt
	course Course? @relation(fields:[courseId], references:[id])
	courseId Int?
}

model Submission {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	student Student? @relation(fields:[studentId], references:[id])
	studentId Int?
	assignment Assignment? @relation(fields:[assignmentId], references:[id])
	assignmentId Int?
	content Content @relation(fields:[contentId], references:[id])
	contentId Int
}

model Content {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	content String 
	files File[]
	assignment Assignment?
	submission Submission?
	lesson Lesson?
}

model File {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	type String 
	link String 
	content Content? @relation(fields:[contentId], references:[id])
	contentId Int?
}

model Lesson {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	published Boolean @default(false)
	content Content @relation(fields:[contentId], references:[id])
	contentId Int
	lessons Course? @relation(fields:[lessonsId], references:[id])
	lessonsId Int?
}
