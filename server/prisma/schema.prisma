datasource db {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String
  /// @TypeGraphQL.omit(output: true)
  password  String
  role      String
  disabled  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacher   Teacher?
  admin     Admin?
  student   Student?
}

model Student {
  id        Int    @id @default(autoincrement())
  year      Int
  firstName String
  lastName  String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int    @unique
  topic     Topic? @relation(fields: [topicId], references: [id])
  topicId   Int?
}

model Teacher {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  courses   Course[]
}

model Admin {
  id        Int    @id @default(autoincrement())
  lastName  String
  firstName String
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
}

model Department {
  id     Int     @id @default(autoincrement())
  name   String
  topics Topic[]
}

model Topic {
  id           Int         @id @default(autoincrement())
  name         String
  years        Int
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  courses      Course[]
  students     Student[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  year        Int
  description String?
  published   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  topic       Topic?       @relation(fields: [topicId], references: [id])
  topicId     Int?
  assignments Assignment[]
  teacher     Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId   Int?
  meetings    Meeting[]
  lessons     Lesson[]
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean
  content     String
  description String?
  course      Course?  @relation(fields: [courseId], references: [id])
  courseId    Int?
}

model Meeting {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  startTime   DateTime
  duration    DateTime
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course?  @relation(fields: [courseId], references: [id])
  courseId    Int?
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  published   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  course      Course?  @relation(fields: [courseId], references: [id])
  courseId    Int?
}
