"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib = __importStar(require("tslib"));
const crudResolvers = __importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = __importStar(require("./resolvers/crud/args.index"));
const actionResolvers = __importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = __importStar(require("./resolvers/relations/resolvers.index"));
const models = __importStar(require("./models"));
const outputTypes = __importStar(require("./resolvers/outputs"));
const inputTypes = __importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    Student: crudResolvers.StudentCrudResolver,
    Teacher: crudResolvers.TeacherCrudResolver,
    Admin: crudResolvers.AdminCrudResolver,
    Department: crudResolvers.DepartmentCrudResolver,
    Topic: crudResolvers.TopicCrudResolver,
    Course: crudResolvers.CourseCrudResolver,
    Assignment: crudResolvers.AssignmentCrudResolver,
    Meeting: crudResolvers.MeetingCrudResolver,
    Submission: crudResolvers.SubmissionCrudResolver,
    AssignmentFile: crudResolvers.AssignmentFileCrudResolver,
    Lesson: crudResolvers.LessonCrudResolver,
    LessonFile: crudResolvers.LessonFileCrudResolver,
    SubmissionFile: crudResolvers.SubmissionFileCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Student: {
        student: actionResolvers.FindUniqueStudentResolver,
        findFirstStudent: actionResolvers.FindFirstStudentResolver,
        students: actionResolvers.FindManyStudentResolver,
        createStudent: actionResolvers.CreateStudentResolver,
        deleteStudent: actionResolvers.DeleteStudentResolver,
        updateStudent: actionResolvers.UpdateStudentResolver,
        deleteManyStudent: actionResolvers.DeleteManyStudentResolver,
        updateManyStudent: actionResolvers.UpdateManyStudentResolver,
        upsertStudent: actionResolvers.UpsertStudentResolver,
        aggregateStudent: actionResolvers.AggregateStudentResolver,
        groupByStudent: actionResolvers.GroupByStudentResolver
    },
    Teacher: {
        teacher: actionResolvers.FindUniqueTeacherResolver,
        findFirstTeacher: actionResolvers.FindFirstTeacherResolver,
        teachers: actionResolvers.FindManyTeacherResolver,
        createTeacher: actionResolvers.CreateTeacherResolver,
        deleteTeacher: actionResolvers.DeleteTeacherResolver,
        updateTeacher: actionResolvers.UpdateTeacherResolver,
        deleteManyTeacher: actionResolvers.DeleteManyTeacherResolver,
        updateManyTeacher: actionResolvers.UpdateManyTeacherResolver,
        upsertTeacher: actionResolvers.UpsertTeacherResolver,
        aggregateTeacher: actionResolvers.AggregateTeacherResolver,
        groupByTeacher: actionResolvers.GroupByTeacherResolver
    },
    Admin: {
        admin: actionResolvers.FindUniqueAdminResolver,
        findFirstAdmin: actionResolvers.FindFirstAdminResolver,
        admins: actionResolvers.FindManyAdminResolver,
        createAdmin: actionResolvers.CreateAdminResolver,
        deleteAdmin: actionResolvers.DeleteAdminResolver,
        updateAdmin: actionResolvers.UpdateAdminResolver,
        deleteManyAdmin: actionResolvers.DeleteManyAdminResolver,
        updateManyAdmin: actionResolvers.UpdateManyAdminResolver,
        upsertAdmin: actionResolvers.UpsertAdminResolver,
        aggregateAdmin: actionResolvers.AggregateAdminResolver,
        groupByAdmin: actionResolvers.GroupByAdminResolver
    },
    Department: {
        department: actionResolvers.FindUniqueDepartmentResolver,
        findFirstDepartment: actionResolvers.FindFirstDepartmentResolver,
        departments: actionResolvers.FindManyDepartmentResolver,
        createDepartment: actionResolvers.CreateDepartmentResolver,
        deleteDepartment: actionResolvers.DeleteDepartmentResolver,
        updateDepartment: actionResolvers.UpdateDepartmentResolver,
        deleteManyDepartment: actionResolvers.DeleteManyDepartmentResolver,
        updateManyDepartment: actionResolvers.UpdateManyDepartmentResolver,
        upsertDepartment: actionResolvers.UpsertDepartmentResolver,
        aggregateDepartment: actionResolvers.AggregateDepartmentResolver,
        groupByDepartment: actionResolvers.GroupByDepartmentResolver
    },
    Topic: {
        topic: actionResolvers.FindUniqueTopicResolver,
        findFirstTopic: actionResolvers.FindFirstTopicResolver,
        topics: actionResolvers.FindManyTopicResolver,
        createTopic: actionResolvers.CreateTopicResolver,
        deleteTopic: actionResolvers.DeleteTopicResolver,
        updateTopic: actionResolvers.UpdateTopicResolver,
        deleteManyTopic: actionResolvers.DeleteManyTopicResolver,
        updateManyTopic: actionResolvers.UpdateManyTopicResolver,
        upsertTopic: actionResolvers.UpsertTopicResolver,
        aggregateTopic: actionResolvers.AggregateTopicResolver,
        groupByTopic: actionResolvers.GroupByTopicResolver
    },
    Course: {
        course: actionResolvers.FindUniqueCourseResolver,
        findFirstCourse: actionResolvers.FindFirstCourseResolver,
        courses: actionResolvers.FindManyCourseResolver,
        createCourse: actionResolvers.CreateCourseResolver,
        deleteCourse: actionResolvers.DeleteCourseResolver,
        updateCourse: actionResolvers.UpdateCourseResolver,
        deleteManyCourse: actionResolvers.DeleteManyCourseResolver,
        updateManyCourse: actionResolvers.UpdateManyCourseResolver,
        upsertCourse: actionResolvers.UpsertCourseResolver,
        aggregateCourse: actionResolvers.AggregateCourseResolver,
        groupByCourse: actionResolvers.GroupByCourseResolver
    },
    Assignment: {
        assignment: actionResolvers.FindUniqueAssignmentResolver,
        findFirstAssignment: actionResolvers.FindFirstAssignmentResolver,
        assignments: actionResolvers.FindManyAssignmentResolver,
        createAssignment: actionResolvers.CreateAssignmentResolver,
        deleteAssignment: actionResolvers.DeleteAssignmentResolver,
        updateAssignment: actionResolvers.UpdateAssignmentResolver,
        deleteManyAssignment: actionResolvers.DeleteManyAssignmentResolver,
        updateManyAssignment: actionResolvers.UpdateManyAssignmentResolver,
        upsertAssignment: actionResolvers.UpsertAssignmentResolver,
        aggregateAssignment: actionResolvers.AggregateAssignmentResolver,
        groupByAssignment: actionResolvers.GroupByAssignmentResolver
    },
    Meeting: {
        meeting: actionResolvers.FindUniqueMeetingResolver,
        findFirstMeeting: actionResolvers.FindFirstMeetingResolver,
        meetings: actionResolvers.FindManyMeetingResolver,
        createMeeting: actionResolvers.CreateMeetingResolver,
        deleteMeeting: actionResolvers.DeleteMeetingResolver,
        updateMeeting: actionResolvers.UpdateMeetingResolver,
        deleteManyMeeting: actionResolvers.DeleteManyMeetingResolver,
        updateManyMeeting: actionResolvers.UpdateManyMeetingResolver,
        upsertMeeting: actionResolvers.UpsertMeetingResolver,
        aggregateMeeting: actionResolvers.AggregateMeetingResolver,
        groupByMeeting: actionResolvers.GroupByMeetingResolver
    },
    Submission: {
        submission: actionResolvers.FindUniqueSubmissionResolver,
        findFirstSubmission: actionResolvers.FindFirstSubmissionResolver,
        submissions: actionResolvers.FindManySubmissionResolver,
        createSubmission: actionResolvers.CreateSubmissionResolver,
        deleteSubmission: actionResolvers.DeleteSubmissionResolver,
        updateSubmission: actionResolvers.UpdateSubmissionResolver,
        deleteManySubmission: actionResolvers.DeleteManySubmissionResolver,
        updateManySubmission: actionResolvers.UpdateManySubmissionResolver,
        upsertSubmission: actionResolvers.UpsertSubmissionResolver,
        aggregateSubmission: actionResolvers.AggregateSubmissionResolver,
        groupBySubmission: actionResolvers.GroupBySubmissionResolver
    },
    AssignmentFile: {
        assignmentFile: actionResolvers.FindUniqueAssignmentFileResolver,
        findFirstAssignmentFile: actionResolvers.FindFirstAssignmentFileResolver,
        assignmentFiles: actionResolvers.FindManyAssignmentFileResolver,
        createAssignmentFile: actionResolvers.CreateAssignmentFileResolver,
        deleteAssignmentFile: actionResolvers.DeleteAssignmentFileResolver,
        updateAssignmentFile: actionResolvers.UpdateAssignmentFileResolver,
        deleteManyAssignmentFile: actionResolvers.DeleteManyAssignmentFileResolver,
        updateManyAssignmentFile: actionResolvers.UpdateManyAssignmentFileResolver,
        upsertAssignmentFile: actionResolvers.UpsertAssignmentFileResolver,
        aggregateAssignmentFile: actionResolvers.AggregateAssignmentFileResolver,
        groupByAssignmentFile: actionResolvers.GroupByAssignmentFileResolver
    },
    Lesson: {
        lesson: actionResolvers.FindUniqueLessonResolver,
        findFirstLesson: actionResolvers.FindFirstLessonResolver,
        lessons: actionResolvers.FindManyLessonResolver,
        createLesson: actionResolvers.CreateLessonResolver,
        deleteLesson: actionResolvers.DeleteLessonResolver,
        updateLesson: actionResolvers.UpdateLessonResolver,
        deleteManyLesson: actionResolvers.DeleteManyLessonResolver,
        updateManyLesson: actionResolvers.UpdateManyLessonResolver,
        upsertLesson: actionResolvers.UpsertLessonResolver,
        aggregateLesson: actionResolvers.AggregateLessonResolver,
        groupByLesson: actionResolvers.GroupByLessonResolver
    },
    LessonFile: {
        lessonFile: actionResolvers.FindUniqueLessonFileResolver,
        findFirstLessonFile: actionResolvers.FindFirstLessonFileResolver,
        lessonFiles: actionResolvers.FindManyLessonFileResolver,
        createLessonFile: actionResolvers.CreateLessonFileResolver,
        deleteLessonFile: actionResolvers.DeleteLessonFileResolver,
        updateLessonFile: actionResolvers.UpdateLessonFileResolver,
        deleteManyLessonFile: actionResolvers.DeleteManyLessonFileResolver,
        updateManyLessonFile: actionResolvers.UpdateManyLessonFileResolver,
        upsertLessonFile: actionResolvers.UpsertLessonFileResolver,
        aggregateLessonFile: actionResolvers.AggregateLessonFileResolver,
        groupByLessonFile: actionResolvers.GroupByLessonFileResolver
    },
    SubmissionFile: {
        submissionFile: actionResolvers.FindUniqueSubmissionFileResolver,
        findFirstSubmissionFile: actionResolvers.FindFirstSubmissionFileResolver,
        submissionFiles: actionResolvers.FindManySubmissionFileResolver,
        createSubmissionFile: actionResolvers.CreateSubmissionFileResolver,
        deleteSubmissionFile: actionResolvers.DeleteSubmissionFileResolver,
        updateSubmissionFile: actionResolvers.UpdateSubmissionFileResolver,
        deleteManySubmissionFile: actionResolvers.DeleteManySubmissionFileResolver,
        updateManySubmissionFile: actionResolvers.UpdateManySubmissionFileResolver,
        upsertSubmissionFile: actionResolvers.UpsertSubmissionFileResolver,
        aggregateSubmissionFile: actionResolvers.AggregateSubmissionFileResolver,
        groupBySubmissionFile: actionResolvers.GroupBySubmissionFileResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Student: ["student", "findFirstStudent", "students", "createStudent", "deleteStudent", "updateStudent", "deleteManyStudent", "updateManyStudent", "upsertStudent", "aggregateStudent", "groupByStudent"],
    Teacher: ["teacher", "findFirstTeacher", "teachers", "createTeacher", "deleteTeacher", "updateTeacher", "deleteManyTeacher", "updateManyTeacher", "upsertTeacher", "aggregateTeacher", "groupByTeacher"],
    Admin: ["admin", "findFirstAdmin", "admins", "createAdmin", "deleteAdmin", "updateAdmin", "deleteManyAdmin", "updateManyAdmin", "upsertAdmin", "aggregateAdmin", "groupByAdmin"],
    Department: ["department", "findFirstDepartment", "departments", "createDepartment", "deleteDepartment", "updateDepartment", "deleteManyDepartment", "updateManyDepartment", "upsertDepartment", "aggregateDepartment", "groupByDepartment"],
    Topic: ["topic", "findFirstTopic", "topics", "createTopic", "deleteTopic", "updateTopic", "deleteManyTopic", "updateManyTopic", "upsertTopic", "aggregateTopic", "groupByTopic"],
    Course: ["course", "findFirstCourse", "courses", "createCourse", "deleteCourse", "updateCourse", "deleteManyCourse", "updateManyCourse", "upsertCourse", "aggregateCourse", "groupByCourse"],
    Assignment: ["assignment", "findFirstAssignment", "assignments", "createAssignment", "deleteAssignment", "updateAssignment", "deleteManyAssignment", "updateManyAssignment", "upsertAssignment", "aggregateAssignment", "groupByAssignment"],
    Meeting: ["meeting", "findFirstMeeting", "meetings", "createMeeting", "deleteMeeting", "updateMeeting", "deleteManyMeeting", "updateManyMeeting", "upsertMeeting", "aggregateMeeting", "groupByMeeting"],
    Submission: ["submission", "findFirstSubmission", "submissions", "createSubmission", "deleteSubmission", "updateSubmission", "deleteManySubmission", "updateManySubmission", "upsertSubmission", "aggregateSubmission", "groupBySubmission"],
    AssignmentFile: ["assignmentFile", "findFirstAssignmentFile", "assignmentFiles", "createAssignmentFile", "deleteAssignmentFile", "updateAssignmentFile", "deleteManyAssignmentFile", "updateManyAssignmentFile", "upsertAssignmentFile", "aggregateAssignmentFile", "groupByAssignmentFile"],
    Lesson: ["lesson", "findFirstLesson", "lessons", "createLesson", "deleteLesson", "updateLesson", "deleteManyLesson", "updateManyLesson", "upsertLesson", "aggregateLesson", "groupByLesson"],
    LessonFile: ["lessonFile", "findFirstLessonFile", "lessonFiles", "createLessonFile", "deleteLessonFile", "updateLessonFile", "deleteManyLessonFile", "updateManyLessonFile", "upsertLessonFile", "aggregateLessonFile", "groupByLessonFile"],
    SubmissionFile: ["submissionFile", "findFirstSubmissionFile", "submissionFiles", "createSubmissionFile", "deleteSubmissionFile", "updateSubmissionFile", "deleteManySubmissionFile", "updateManySubmissionFile", "upsertSubmissionFile", "aggregateSubmissionFile", "groupBySubmissionFile"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueStudentArgs: ["where"],
    FindFirstStudentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyStudentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateStudentArgs: ["data"],
    DeleteStudentArgs: ["where"],
    UpdateStudentArgs: ["data", "where"],
    DeleteManyStudentArgs: ["where"],
    UpdateManyStudentArgs: ["data", "where"],
    UpsertStudentArgs: ["where", "create", "update"],
    AggregateStudentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByStudentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTeacherArgs: ["where"],
    FindFirstTeacherArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTeacherArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTeacherArgs: ["data"],
    DeleteTeacherArgs: ["where"],
    UpdateTeacherArgs: ["data", "where"],
    DeleteManyTeacherArgs: ["where"],
    UpdateManyTeacherArgs: ["data", "where"],
    UpsertTeacherArgs: ["where", "create", "update"],
    AggregateTeacherArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTeacherArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAdminArgs: ["where"],
    FindFirstAdminArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAdminArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAdminArgs: ["data"],
    DeleteAdminArgs: ["where"],
    UpdateAdminArgs: ["data", "where"],
    DeleteManyAdminArgs: ["where"],
    UpdateManyAdminArgs: ["data", "where"],
    UpsertAdminArgs: ["where", "create", "update"],
    AggregateAdminArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAdminArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueDepartmentArgs: ["where"],
    FindFirstDepartmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyDepartmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateDepartmentArgs: ["data"],
    DeleteDepartmentArgs: ["where"],
    UpdateDepartmentArgs: ["data", "where"],
    DeleteManyDepartmentArgs: ["where"],
    UpdateManyDepartmentArgs: ["data", "where"],
    UpsertDepartmentArgs: ["where", "create", "update"],
    AggregateDepartmentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByDepartmentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTopicArgs: ["where"],
    FindFirstTopicArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTopicArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTopicArgs: ["data"],
    DeleteTopicArgs: ["where"],
    UpdateTopicArgs: ["data", "where"],
    DeleteManyTopicArgs: ["where"],
    UpdateManyTopicArgs: ["data", "where"],
    UpsertTopicArgs: ["where", "create", "update"],
    AggregateTopicArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTopicArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCourseArgs: ["where"],
    FindFirstCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCourseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCourseArgs: ["data"],
    DeleteCourseArgs: ["where"],
    UpdateCourseArgs: ["data", "where"],
    DeleteManyCourseArgs: ["where"],
    UpdateManyCourseArgs: ["data", "where"],
    UpsertCourseArgs: ["where", "create", "update"],
    AggregateCourseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCourseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAssignmentArgs: ["where"],
    FindFirstAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAssignmentArgs: ["data"],
    DeleteAssignmentArgs: ["where"],
    UpdateAssignmentArgs: ["data", "where"],
    DeleteManyAssignmentArgs: ["where"],
    UpdateManyAssignmentArgs: ["data", "where"],
    UpsertAssignmentArgs: ["where", "create", "update"],
    AggregateAssignmentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAssignmentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMeetingArgs: ["where"],
    FindFirstMeetingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMeetingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMeetingArgs: ["data"],
    DeleteMeetingArgs: ["where"],
    UpdateMeetingArgs: ["data", "where"],
    DeleteManyMeetingArgs: ["where"],
    UpdateManyMeetingArgs: ["data", "where"],
    UpsertMeetingArgs: ["where", "create", "update"],
    AggregateMeetingArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMeetingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSubmissionArgs: ["where"],
    FindFirstSubmissionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySubmissionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSubmissionArgs: ["data"],
    DeleteSubmissionArgs: ["where"],
    UpdateSubmissionArgs: ["data", "where"],
    DeleteManySubmissionArgs: ["where"],
    UpdateManySubmissionArgs: ["data", "where"],
    UpsertSubmissionArgs: ["where", "create", "update"],
    AggregateSubmissionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySubmissionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAssignmentFileArgs: ["where"],
    FindFirstAssignmentFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAssignmentFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAssignmentFileArgs: ["data"],
    DeleteAssignmentFileArgs: ["where"],
    UpdateAssignmentFileArgs: ["data", "where"],
    DeleteManyAssignmentFileArgs: ["where"],
    UpdateManyAssignmentFileArgs: ["data", "where"],
    UpsertAssignmentFileArgs: ["where", "create", "update"],
    AggregateAssignmentFileArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAssignmentFileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLessonArgs: ["where"],
    FindFirstLessonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLessonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLessonArgs: ["data"],
    DeleteLessonArgs: ["where"],
    UpdateLessonArgs: ["data", "where"],
    DeleteManyLessonArgs: ["where"],
    UpdateManyLessonArgs: ["data", "where"],
    UpsertLessonArgs: ["where", "create", "update"],
    AggregateLessonArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLessonArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLessonFileArgs: ["where"],
    FindFirstLessonFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLessonFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLessonFileArgs: ["data"],
    DeleteLessonFileArgs: ["where"],
    UpdateLessonFileArgs: ["data", "where"],
    DeleteManyLessonFileArgs: ["where"],
    UpdateManyLessonFileArgs: ["data", "where"],
    UpsertLessonFileArgs: ["where", "create", "update"],
    AggregateLessonFileArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLessonFileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSubmissionFileArgs: ["where"],
    FindFirstSubmissionFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySubmissionFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSubmissionFileArgs: ["data"],
    DeleteSubmissionFileArgs: ["where"],
    UpdateSubmissionFileArgs: ["data", "where"],
    DeleteManySubmissionFileArgs: ["where"],
    UpdateManySubmissionFileArgs: ["data", "where"],
    UpsertSubmissionFileArgs: ["where", "create", "update"],
    AggregateSubmissionFileArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySubmissionFileArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    Student: relationResolvers.StudentRelationsResolver,
    Teacher: relationResolvers.TeacherRelationsResolver,
    Admin: relationResolvers.AdminRelationsResolver,
    Department: relationResolvers.DepartmentRelationsResolver,
    Topic: relationResolvers.TopicRelationsResolver,
    Course: relationResolvers.CourseRelationsResolver,
    Assignment: relationResolvers.AssignmentRelationsResolver,
    Meeting: relationResolvers.MeetingRelationsResolver,
    Submission: relationResolvers.SubmissionRelationsResolver,
    AssignmentFile: relationResolvers.AssignmentFileRelationsResolver,
    Lesson: relationResolvers.LessonRelationsResolver,
    LessonFile: relationResolvers.LessonFileRelationsResolver,
    SubmissionFile: relationResolvers.SubmissionFileRelationsResolver
};
const relationResolversInfo = {
    User: ["teacher", "admin", "student"],
    Student: ["user", "submissions", "topic"],
    Teacher: ["user", "courses"],
    Admin: ["user"],
    Department: ["topics"],
    Topic: ["department", "courses", "students"],
    Course: ["topic", "assignments", "teacher", "meetings", "lessons"],
    Assignment: ["course", "submissions", "assignmentFiles"],
    Meeting: ["course"],
    Submission: ["student", "assignment", "submissionFiles"],
    AssignmentFile: ["assignment"],
    Lesson: ["lessonFiles", "course"],
    LessonFile: ["lesson"],
    SubmissionFile: ["submission"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["id", "username", "email", "role", "disabled", "createdAt", "updatedAt"],
    Student: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    Teacher: ["id", "firstName", "lastName", "userId"],
    Admin: ["id", "lastName", "firstName", "userId"],
    Department: ["id", "name"],
    Topic: ["id", "name", "years", "departmentId"],
    Course: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    Assignment: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    Meeting: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    Submission: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    AssignmentFile: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    Lesson: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonFile: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    SubmissionFile: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
    UserGroupBy: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateStudent: ["_count", "_avg", "_sum", "_min", "_max"],
    StudentGroupBy: ["id", "year", "firstName", "lastName", "userId", "topicId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTeacher: ["_count", "_avg", "_sum", "_min", "_max"],
    TeacherGroupBy: ["id", "firstName", "lastName", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAdmin: ["_count", "_avg", "_sum", "_min", "_max"],
    AdminGroupBy: ["id", "lastName", "firstName", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateDepartment: ["_count", "_avg", "_sum", "_min", "_max"],
    DepartmentGroupBy: ["id", "name", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTopic: ["_count", "_avg", "_sum", "_min", "_max"],
    TopicGroupBy: ["id", "name", "years", "departmentId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateCourse: ["_count", "_avg", "_sum", "_min", "_max"],
    CourseGroupBy: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAssignment: ["_count", "_avg", "_sum", "_min", "_max"],
    AssignmentGroupBy: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateMeeting: ["_count", "_avg", "_sum", "_min", "_max"],
    MeetingGroupBy: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSubmission: ["_count", "_avg", "_sum", "_min", "_max"],
    SubmissionGroupBy: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAssignmentFile: ["_count", "_avg", "_sum", "_min", "_max"],
    AssignmentFileGroupBy: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLesson: ["_count", "_avg", "_sum", "_min", "_max"],
    LessonGroupBy: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLessonFile: ["_count", "_avg", "_sum", "_min", "_max"],
    LessonFileGroupBy: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSubmissionFile: ["_count", "_avg", "_sum", "_min", "_max"],
    SubmissionFileGroupBy: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCountAggregate: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "_all"],
    UserAvgAggregate: ["id"],
    UserSumAggregate: ["id"],
    UserMinAggregate: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    UserMaxAggregate: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    StudentCount: ["submissions"],
    StudentCountAggregate: ["id", "year", "firstName", "lastName", "userId", "topicId", "_all"],
    StudentAvgAggregate: ["id", "year", "userId", "topicId"],
    StudentSumAggregate: ["id", "year", "userId", "topicId"],
    StudentMinAggregate: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    StudentMaxAggregate: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    TeacherCount: ["courses"],
    TeacherCountAggregate: ["id", "firstName", "lastName", "userId", "_all"],
    TeacherAvgAggregate: ["id", "userId"],
    TeacherSumAggregate: ["id", "userId"],
    TeacherMinAggregate: ["id", "firstName", "lastName", "userId"],
    TeacherMaxAggregate: ["id", "firstName", "lastName", "userId"],
    AdminCountAggregate: ["id", "lastName", "firstName", "userId", "_all"],
    AdminAvgAggregate: ["id", "userId"],
    AdminSumAggregate: ["id", "userId"],
    AdminMinAggregate: ["id", "lastName", "firstName", "userId"],
    AdminMaxAggregate: ["id", "lastName", "firstName", "userId"],
    DepartmentCount: ["topics"],
    DepartmentCountAggregate: ["id", "name", "_all"],
    DepartmentAvgAggregate: ["id"],
    DepartmentSumAggregate: ["id"],
    DepartmentMinAggregate: ["id", "name"],
    DepartmentMaxAggregate: ["id", "name"],
    TopicCount: ["courses", "students"],
    TopicCountAggregate: ["id", "name", "years", "departmentId", "_all"],
    TopicAvgAggregate: ["id", "years", "departmentId"],
    TopicSumAggregate: ["id", "years", "departmentId"],
    TopicMinAggregate: ["id", "name", "years", "departmentId"],
    TopicMaxAggregate: ["id", "name", "years", "departmentId"],
    CourseCount: ["assignments", "meetings", "lessons"],
    CourseCountAggregate: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId", "_all"],
    CourseAvgAggregate: ["id", "year", "topicId", "teacherId"],
    CourseSumAggregate: ["id", "year", "topicId", "teacherId"],
    CourseMinAggregate: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    CourseMaxAggregate: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    AssignmentCount: ["submissions", "assignmentFiles"],
    AssignmentCountAggregate: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId", "_all"],
    AssignmentAvgAggregate: ["id", "courseId"],
    AssignmentSumAggregate: ["id", "courseId"],
    AssignmentMinAggregate: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    AssignmentMaxAggregate: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    MeetingCountAggregate: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId", "_all"],
    MeetingAvgAggregate: ["id", "courseId"],
    MeetingSumAggregate: ["id", "courseId"],
    MeetingMinAggregate: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    MeetingMaxAggregate: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    SubmissionCount: ["submissionFiles"],
    SubmissionCountAggregate: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId", "_all"],
    SubmissionAvgAggregate: ["id", "studentId", "assignmentId"],
    SubmissionSumAggregate: ["id", "studentId", "assignmentId"],
    SubmissionMinAggregate: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    SubmissionMaxAggregate: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    AssignmentFileCountAggregate: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId", "_all"],
    AssignmentFileAvgAggregate: ["id", "assignmentId"],
    AssignmentFileSumAggregate: ["id", "assignmentId"],
    AssignmentFileMinAggregate: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    AssignmentFileMaxAggregate: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    LessonCount: ["lessonFiles"],
    LessonCountAggregate: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId", "_all"],
    LessonAvgAggregate: ["id", "courseId"],
    LessonSumAggregate: ["id", "courseId"],
    LessonMinAggregate: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonMaxAggregate: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonFileCountAggregate: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId", "_all"],
    LessonFileAvgAggregate: ["id", "lessonId"],
    LessonFileSumAggregate: ["id", "lessonId"],
    LessonFileMinAggregate: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    LessonFileMaxAggregate: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    SubmissionFileCountAggregate: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId", "_all"],
    SubmissionFileAvgAggregate: ["id", "submissionId"],
    SubmissionFileSumAggregate: ["id", "submissionId"],
    SubmissionFileMinAggregate: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    SubmissionFileMaxAggregate: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin", "student"],
    UserOrderByWithRelationInput: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin", "student"],
    UserWhereUniqueInput: ["id"],
    UserOrderByWithAggregationInput: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    StudentWhereInput: ["AND", "OR", "NOT", "id", "year", "firstName", "lastName", "user", "userId", "submissions", "topic", "topicId"],
    StudentOrderByWithRelationInput: ["id", "year", "firstName", "lastName", "user", "userId", "submissions", "topic", "topicId"],
    StudentWhereUniqueInput: ["id", "userId"],
    StudentOrderByWithAggregationInput: ["id", "year", "firstName", "lastName", "userId", "topicId", "_count", "_avg", "_max", "_min", "_sum"],
    StudentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "year", "firstName", "lastName", "userId", "topicId"],
    TeacherWhereInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "user", "userId", "courses"],
    TeacherOrderByWithRelationInput: ["id", "firstName", "lastName", "user", "userId", "courses"],
    TeacherWhereUniqueInput: ["id", "userId"],
    TeacherOrderByWithAggregationInput: ["id", "firstName", "lastName", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    TeacherScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "userId"],
    AdminWhereInput: ["AND", "OR", "NOT", "id", "lastName", "firstName", "user", "userId"],
    AdminOrderByWithRelationInput: ["id", "lastName", "firstName", "user", "userId"],
    AdminWhereUniqueInput: ["id", "userId"],
    AdminOrderByWithAggregationInput: ["id", "lastName", "firstName", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    AdminScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "lastName", "firstName", "userId"],
    DepartmentWhereInput: ["AND", "OR", "NOT", "id", "name", "topics"],
    DepartmentOrderByWithRelationInput: ["id", "name", "topics"],
    DepartmentWhereUniqueInput: ["id"],
    DepartmentOrderByWithAggregationInput: ["id", "name", "_count", "_avg", "_max", "_min", "_sum"],
    DepartmentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
    TopicWhereInput: ["AND", "OR", "NOT", "id", "name", "years", "department", "departmentId", "courses", "students"],
    TopicOrderByWithRelationInput: ["id", "name", "years", "department", "departmentId", "courses", "students"],
    TopicWhereUniqueInput: ["id"],
    TopicOrderByWithAggregationInput: ["id", "name", "years", "departmentId", "_count", "_avg", "_max", "_min", "_sum"],
    TopicScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "years", "departmentId"],
    CourseWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "description", "published", "createdAt", "updatedAt", "topic", "topicId", "assignments", "teacher", "teacherId", "meetings", "lessons"],
    CourseOrderByWithRelationInput: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topic", "topicId", "assignments", "teacher", "teacherId", "meetings", "lessons"],
    CourseWhereUniqueInput: ["id"],
    CourseOrderByWithAggregationInput: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId", "_count", "_avg", "_max", "_min", "_sum"],
    CourseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    AssignmentWhereInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "published", "content", "description", "course", "courseId", "submissions", "assignmentFiles"],
    AssignmentOrderByWithRelationInput: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "course", "courseId", "submissions", "assignmentFiles"],
    AssignmentWhereUniqueInput: ["id"],
    AssignmentOrderByWithAggregationInput: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId", "_count", "_avg", "_max", "_min", "_sum"],
    AssignmentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    MeetingWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "course", "courseId"],
    MeetingOrderByWithRelationInput: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "course", "courseId"],
    MeetingWhereUniqueInput: ["id"],
    MeetingOrderByWithAggregationInput: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId", "_count", "_avg", "_max", "_min", "_sum"],
    MeetingScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    SubmissionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "content", "student", "studentId", "assignment", "assignmentId", "submissionFiles"],
    SubmissionOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "content", "student", "studentId", "assignment", "assignmentId", "submissionFiles"],
    SubmissionWhereUniqueInput: ["id"],
    SubmissionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId", "_count", "_avg", "_max", "_min", "_sum"],
    SubmissionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    AssignmentFileWhereInput: ["AND", "OR", "NOT", "id", "link", "type", "createdAt", "updatedAt", "name", "assignment", "assignmentId"],
    AssignmentFileOrderByWithRelationInput: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignment", "assignmentId"],
    AssignmentFileWhereUniqueInput: ["id"],
    AssignmentFileOrderByWithAggregationInput: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId", "_count", "_avg", "_max", "_min", "_sum"],
    AssignmentFileScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    LessonWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles", "course", "courseId"],
    LessonOrderByWithRelationInput: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles", "course", "courseId"],
    LessonWhereUniqueInput: ["id"],
    LessonOrderByWithAggregationInput: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId", "_count", "_avg", "_max", "_min", "_sum"],
    LessonScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonFileWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "type", "name", "link", "lesson", "lessonId"],
    LessonFileOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "type", "name", "link", "lesson", "lessonId"],
    LessonFileWhereUniqueInput: ["id"],
    LessonFileOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId", "_count", "_avg", "_max", "_min", "_sum"],
    LessonFileScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    SubmissionFileWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "link", "name", "type", "submission", "submissionId"],
    SubmissionFileOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "link", "name", "type", "submission", "submissionId"],
    SubmissionFileWhereUniqueInput: ["id"],
    SubmissionFileOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId", "_count", "_avg", "_max", "_min", "_sum"],
    SubmissionFileScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    UserCreateInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin", "student"],
    UserUpdateInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin", "student"],
    UserUpdateManyMutationInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    StudentCreateInput: ["year", "firstName", "lastName", "user", "submissions", "topic"],
    StudentUpdateInput: ["year", "firstName", "lastName", "user", "submissions", "topic"],
    StudentUpdateManyMutationInput: ["year", "firstName", "lastName"],
    TeacherCreateInput: ["firstName", "lastName", "user", "courses"],
    TeacherUpdateInput: ["firstName", "lastName", "user", "courses"],
    TeacherUpdateManyMutationInput: ["firstName", "lastName"],
    AdminCreateInput: ["lastName", "firstName", "user"],
    AdminUpdateInput: ["lastName", "firstName", "user"],
    AdminUpdateManyMutationInput: ["lastName", "firstName"],
    DepartmentCreateInput: ["name", "topics"],
    DepartmentUpdateInput: ["name", "topics"],
    DepartmentUpdateManyMutationInput: ["name"],
    TopicCreateInput: ["name", "years", "department", "courses", "students"],
    TopicUpdateInput: ["name", "years", "department", "courses", "students"],
    TopicUpdateManyMutationInput: ["name", "years"],
    CourseCreateInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "meetings", "lessons"],
    CourseUpdateInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "meetings", "lessons"],
    CourseUpdateManyMutationInput: ["title", "year", "description", "published", "createdAt", "updatedAt"],
    AssignmentCreateInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "submissions", "assignmentFiles"],
    AssignmentUpdateInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "submissions", "assignmentFiles"],
    AssignmentUpdateManyMutationInput: ["title", "createdAt", "updatedAt", "published", "content", "description"],
    MeetingCreateInput: ["title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "course"],
    MeetingUpdateInput: ["title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "course"],
    MeetingUpdateManyMutationInput: ["title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt"],
    SubmissionCreateInput: ["createdAt", "updatedAt", "content", "student", "assignment", "submissionFiles"],
    SubmissionUpdateInput: ["createdAt", "updatedAt", "content", "student", "assignment", "submissionFiles"],
    SubmissionUpdateManyMutationInput: ["createdAt", "updatedAt", "content"],
    AssignmentFileCreateInput: ["link", "type", "createdAt", "updatedAt", "name", "assignment"],
    AssignmentFileUpdateInput: ["link", "type", "createdAt", "updatedAt", "name", "assignment"],
    AssignmentFileUpdateManyMutationInput: ["link", "type", "createdAt", "updatedAt", "name"],
    LessonCreateInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles", "course"],
    LessonUpdateInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles", "course"],
    LessonUpdateManyMutationInput: ["title", "description", "published", "createdAt", "updatedAt", "content"],
    LessonFileCreateInput: ["createdAt", "updatedAt", "type", "name", "link", "lesson"],
    LessonFileUpdateInput: ["createdAt", "updatedAt", "type", "name", "link", "lesson"],
    LessonFileUpdateManyMutationInput: ["createdAt", "updatedAt", "type", "name", "link"],
    SubmissionFileCreateInput: ["createdAt", "updatedAt", "link", "name", "type", "submission"],
    SubmissionFileUpdateInput: ["createdAt", "updatedAt", "link", "name", "type", "submission"],
    SubmissionFileUpdateManyMutationInput: ["createdAt", "updatedAt", "link", "name", "type"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    BoolFilter: ["equals", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    TeacherRelationFilter: ["is", "isNot"],
    AdminRelationFilter: ["is", "isNot"],
    StudentRelationFilter: ["is", "isNot"],
    UserCountOrderByAggregateInput: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    UserAvgOrderByAggregateInput: ["id"],
    UserMaxOrderByAggregateInput: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["id", "username", "email", "password", "role", "disabled", "createdAt", "updatedAt"],
    UserSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    UserRelationFilter: ["is", "isNot"],
    SubmissionListRelationFilter: ["every", "some", "none"],
    TopicRelationFilter: ["is", "isNot"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    SubmissionOrderByRelationAggregateInput: ["_count"],
    StudentCountOrderByAggregateInput: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    StudentAvgOrderByAggregateInput: ["id", "year", "userId", "topicId"],
    StudentMaxOrderByAggregateInput: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    StudentMinOrderByAggregateInput: ["id", "year", "firstName", "lastName", "userId", "topicId"],
    StudentSumOrderByAggregateInput: ["id", "year", "userId", "topicId"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    CourseListRelationFilter: ["every", "some", "none"],
    CourseOrderByRelationAggregateInput: ["_count"],
    TeacherCountOrderByAggregateInput: ["id", "firstName", "lastName", "userId"],
    TeacherAvgOrderByAggregateInput: ["id", "userId"],
    TeacherMaxOrderByAggregateInput: ["id", "firstName", "lastName", "userId"],
    TeacherMinOrderByAggregateInput: ["id", "firstName", "lastName", "userId"],
    TeacherSumOrderByAggregateInput: ["id", "userId"],
    AdminCountOrderByAggregateInput: ["id", "lastName", "firstName", "userId"],
    AdminAvgOrderByAggregateInput: ["id", "userId"],
    AdminMaxOrderByAggregateInput: ["id", "lastName", "firstName", "userId"],
    AdminMinOrderByAggregateInput: ["id", "lastName", "firstName", "userId"],
    AdminSumOrderByAggregateInput: ["id", "userId"],
    TopicListRelationFilter: ["every", "some", "none"],
    TopicOrderByRelationAggregateInput: ["_count"],
    DepartmentCountOrderByAggregateInput: ["id", "name"],
    DepartmentAvgOrderByAggregateInput: ["id"],
    DepartmentMaxOrderByAggregateInput: ["id", "name"],
    DepartmentMinOrderByAggregateInput: ["id", "name"],
    DepartmentSumOrderByAggregateInput: ["id"],
    DepartmentRelationFilter: ["is", "isNot"],
    StudentListRelationFilter: ["every", "some", "none"],
    StudentOrderByRelationAggregateInput: ["_count"],
    TopicCountOrderByAggregateInput: ["id", "name", "years", "departmentId"],
    TopicAvgOrderByAggregateInput: ["id", "years", "departmentId"],
    TopicMaxOrderByAggregateInput: ["id", "name", "years", "departmentId"],
    TopicMinOrderByAggregateInput: ["id", "name", "years", "departmentId"],
    TopicSumOrderByAggregateInput: ["id", "years", "departmentId"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    AssignmentListRelationFilter: ["every", "some", "none"],
    MeetingListRelationFilter: ["every", "some", "none"],
    LessonListRelationFilter: ["every", "some", "none"],
    AssignmentOrderByRelationAggregateInput: ["_count"],
    MeetingOrderByRelationAggregateInput: ["_count"],
    LessonOrderByRelationAggregateInput: ["_count"],
    CourseCountOrderByAggregateInput: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    CourseAvgOrderByAggregateInput: ["id", "year", "topicId", "teacherId"],
    CourseMaxOrderByAggregateInput: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    CourseMinOrderByAggregateInput: ["id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    CourseSumOrderByAggregateInput: ["id", "year", "topicId", "teacherId"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    CourseRelationFilter: ["is", "isNot"],
    AssignmentFileListRelationFilter: ["every", "some", "none"],
    AssignmentFileOrderByRelationAggregateInput: ["_count"],
    AssignmentCountOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    AssignmentAvgOrderByAggregateInput: ["id", "courseId"],
    AssignmentMaxOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    AssignmentMinOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    AssignmentSumOrderByAggregateInput: ["id", "courseId"],
    MeetingCountOrderByAggregateInput: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    MeetingAvgOrderByAggregateInput: ["id", "courseId"],
    MeetingMaxOrderByAggregateInput: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    MeetingMinOrderByAggregateInput: ["id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    MeetingSumOrderByAggregateInput: ["id", "courseId"],
    AssignmentRelationFilter: ["is", "isNot"],
    SubmissionFileListRelationFilter: ["every", "some", "none"],
    SubmissionFileOrderByRelationAggregateInput: ["_count"],
    SubmissionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    SubmissionAvgOrderByAggregateInput: ["id", "studentId", "assignmentId"],
    SubmissionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    SubmissionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    SubmissionSumOrderByAggregateInput: ["id", "studentId", "assignmentId"],
    AssignmentFileCountOrderByAggregateInput: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    AssignmentFileAvgOrderByAggregateInput: ["id", "assignmentId"],
    AssignmentFileMaxOrderByAggregateInput: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    AssignmentFileMinOrderByAggregateInput: ["id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    AssignmentFileSumOrderByAggregateInput: ["id", "assignmentId"],
    LessonFileListRelationFilter: ["every", "some", "none"],
    LessonFileOrderByRelationAggregateInput: ["_count"],
    LessonCountOrderByAggregateInput: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonAvgOrderByAggregateInput: ["id", "courseId"],
    LessonMaxOrderByAggregateInput: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonMinOrderByAggregateInput: ["id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    LessonSumOrderByAggregateInput: ["id", "courseId"],
    LessonRelationFilter: ["is", "isNot"],
    LessonFileCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    LessonFileAvgOrderByAggregateInput: ["id", "lessonId"],
    LessonFileMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    LessonFileMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    LessonFileSumOrderByAggregateInput: ["id", "lessonId"],
    SubmissionRelationFilter: ["is", "isNot"],
    SubmissionFileCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    SubmissionFileAvgOrderByAggregateInput: ["id", "submissionId"],
    SubmissionFileMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    SubmissionFileMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    SubmissionFileSumOrderByAggregateInput: ["id", "submissionId"],
    TeacherCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    AdminCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    StudentCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    BoolFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    TeacherUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AdminUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    StudentUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserCreateNestedOneWithoutStudentInput: ["create", "connectOrCreate", "connect"],
    SubmissionCreateNestedManyWithoutStudentInput: ["create", "connectOrCreate", "connect"],
    TopicCreateNestedOneWithoutStudentsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutStudentInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    SubmissionUpdateManyWithoutStudentInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TopicUpdateOneWithoutStudentsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserCreateNestedOneWithoutTeacherInput: ["create", "connectOrCreate", "connect"],
    CourseCreateNestedManyWithoutTeacherInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutTeacherInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CourseUpdateManyWithoutTeacherInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAdminInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutAdminInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TopicCreateNestedManyWithoutDepartmentInput: ["create", "connectOrCreate", "connect"],
    TopicUpdateManyWithoutDepartmentInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DepartmentCreateNestedOneWithoutTopicsInput: ["create", "connectOrCreate", "connect"],
    CourseCreateNestedManyWithoutTopicInput: ["create", "connectOrCreate", "connect"],
    StudentCreateNestedManyWithoutTopicInput: ["create", "connectOrCreate", "connect"],
    DepartmentUpdateOneWithoutTopicsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CourseUpdateManyWithoutTopicInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    StudentUpdateManyWithoutTopicInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TopicCreateNestedOneWithoutCoursesInput: ["create", "connectOrCreate", "connect"],
    AssignmentCreateNestedManyWithoutCourseInput: ["create", "connectOrCreate", "connect"],
    TeacherCreateNestedOneWithoutCoursesInput: ["create", "connectOrCreate", "connect"],
    MeetingCreateNestedManyWithoutCourseInput: ["create", "connectOrCreate", "connect"],
    LessonCreateNestedManyWithoutCourseInput: ["create", "connectOrCreate", "connect"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    TopicUpdateOneWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AssignmentUpdateManyWithoutCourseInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TeacherUpdateOneWithoutCoursesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    MeetingUpdateManyWithoutCourseInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LessonUpdateManyWithoutCourseInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseCreateNestedOneWithoutAssignmentsInput: ["create", "connectOrCreate", "connect"],
    SubmissionCreateNestedManyWithoutAssignmentInput: ["create", "connectOrCreate", "connect"],
    AssignmentFileCreateNestedManyWithoutAssignmentInput: ["create", "connectOrCreate", "connect"],
    CourseUpdateOneWithoutAssignmentsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SubmissionUpdateManyWithoutAssignmentInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AssignmentFileUpdateManyWithoutAssignmentInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseCreateNestedOneWithoutMeetingsInput: ["create", "connectOrCreate", "connect"],
    CourseUpdateOneWithoutMeetingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    StudentCreateNestedOneWithoutSubmissionsInput: ["create", "connectOrCreate", "connect"],
    AssignmentCreateNestedOneWithoutSubmissionsInput: ["create", "connectOrCreate", "connect"],
    SubmissionFileCreateNestedManyWithoutSubmissionInput: ["create", "connectOrCreate", "connect"],
    StudentUpdateOneWithoutSubmissionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AssignmentUpdateOneWithoutSubmissionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SubmissionFileUpdateManyWithoutSubmissionInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AssignmentCreateNestedOneWithoutAssignmentFilesInput: ["create", "connectOrCreate", "connect"],
    AssignmentUpdateOneWithoutAssignmentFilesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    LessonFileCreateNestedManyWithoutLessonInput: ["create", "connectOrCreate", "connect"],
    CourseCreateNestedOneWithoutLessonsInput: ["create", "connectOrCreate", "connect"],
    LessonFileUpdateManyWithoutLessonInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CourseUpdateOneWithoutLessonsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    LessonCreateNestedOneWithoutLessonFilesInput: ["create", "connectOrCreate", "connect"],
    LessonUpdateOneWithoutLessonFilesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SubmissionCreateNestedOneWithoutSubmissionFilesInput: ["create", "connectOrCreate", "connect"],
    SubmissionUpdateOneWithoutSubmissionFilesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    TeacherCreateWithoutUserInput: ["firstName", "lastName", "courses"],
    TeacherCreateOrConnectWithoutUserInput: ["where", "create"],
    AdminCreateWithoutUserInput: ["lastName", "firstName"],
    AdminCreateOrConnectWithoutUserInput: ["where", "create"],
    StudentCreateWithoutUserInput: ["year", "firstName", "lastName", "submissions", "topic"],
    StudentCreateOrConnectWithoutUserInput: ["where", "create"],
    TeacherUpsertWithoutUserInput: ["update", "create"],
    TeacherUpdateWithoutUserInput: ["firstName", "lastName", "courses"],
    AdminUpsertWithoutUserInput: ["update", "create"],
    AdminUpdateWithoutUserInput: ["lastName", "firstName"],
    StudentUpsertWithoutUserInput: ["update", "create"],
    StudentUpdateWithoutUserInput: ["year", "firstName", "lastName", "submissions", "topic"],
    UserCreateWithoutStudentInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin"],
    UserCreateOrConnectWithoutStudentInput: ["where", "create"],
    SubmissionCreateWithoutStudentInput: ["createdAt", "updatedAt", "content", "assignment", "submissionFiles"],
    SubmissionCreateOrConnectWithoutStudentInput: ["where", "create"],
    TopicCreateWithoutStudentsInput: ["name", "years", "department", "courses"],
    TopicCreateOrConnectWithoutStudentsInput: ["where", "create"],
    UserUpsertWithoutStudentInput: ["update", "create"],
    UserUpdateWithoutStudentInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "admin"],
    SubmissionUpsertWithWhereUniqueWithoutStudentInput: ["where", "update", "create"],
    SubmissionUpdateWithWhereUniqueWithoutStudentInput: ["where", "data"],
    SubmissionUpdateManyWithWhereWithoutStudentInput: ["where", "data"],
    SubmissionScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "content", "studentId", "assignmentId"],
    TopicUpsertWithoutStudentsInput: ["update", "create"],
    TopicUpdateWithoutStudentsInput: ["name", "years", "department", "courses"],
    UserCreateWithoutTeacherInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "admin", "student"],
    UserCreateOrConnectWithoutTeacherInput: ["where", "create"],
    CourseCreateWithoutTeacherInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "meetings", "lessons"],
    CourseCreateOrConnectWithoutTeacherInput: ["where", "create"],
    UserUpsertWithoutTeacherInput: ["update", "create"],
    UserUpdateWithoutTeacherInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "admin", "student"],
    CourseUpsertWithWhereUniqueWithoutTeacherInput: ["where", "update", "create"],
    CourseUpdateWithWhereUniqueWithoutTeacherInput: ["where", "data"],
    CourseUpdateManyWithWhereWithoutTeacherInput: ["where", "data"],
    CourseScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "description", "published", "createdAt", "updatedAt", "topicId", "teacherId"],
    UserCreateWithoutAdminInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "student"],
    UserCreateOrConnectWithoutAdminInput: ["where", "create"],
    UserUpsertWithoutAdminInput: ["update", "create"],
    UserUpdateWithoutAdminInput: ["username", "email", "password", "role", "disabled", "createdAt", "updatedAt", "teacher", "student"],
    TopicCreateWithoutDepartmentInput: ["name", "years", "courses", "students"],
    TopicCreateOrConnectWithoutDepartmentInput: ["where", "create"],
    TopicUpsertWithWhereUniqueWithoutDepartmentInput: ["where", "update", "create"],
    TopicUpdateWithWhereUniqueWithoutDepartmentInput: ["where", "data"],
    TopicUpdateManyWithWhereWithoutDepartmentInput: ["where", "data"],
    TopicScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "years", "departmentId"],
    DepartmentCreateWithoutTopicsInput: ["name"],
    DepartmentCreateOrConnectWithoutTopicsInput: ["where", "create"],
    CourseCreateWithoutTopicInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "assignments", "teacher", "meetings", "lessons"],
    CourseCreateOrConnectWithoutTopicInput: ["where", "create"],
    StudentCreateWithoutTopicInput: ["year", "firstName", "lastName", "user", "submissions"],
    StudentCreateOrConnectWithoutTopicInput: ["where", "create"],
    DepartmentUpsertWithoutTopicsInput: ["update", "create"],
    DepartmentUpdateWithoutTopicsInput: ["name"],
    CourseUpsertWithWhereUniqueWithoutTopicInput: ["where", "update", "create"],
    CourseUpdateWithWhereUniqueWithoutTopicInput: ["where", "data"],
    CourseUpdateManyWithWhereWithoutTopicInput: ["where", "data"],
    StudentUpsertWithWhereUniqueWithoutTopicInput: ["where", "update", "create"],
    StudentUpdateWithWhereUniqueWithoutTopicInput: ["where", "data"],
    StudentUpdateManyWithWhereWithoutTopicInput: ["where", "data"],
    StudentScalarWhereInput: ["AND", "OR", "NOT", "id", "year", "firstName", "lastName", "userId", "topicId"],
    TopicCreateWithoutCoursesInput: ["name", "years", "department", "students"],
    TopicCreateOrConnectWithoutCoursesInput: ["where", "create"],
    AssignmentCreateWithoutCourseInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "submissions", "assignmentFiles"],
    AssignmentCreateOrConnectWithoutCourseInput: ["where", "create"],
    TeacherCreateWithoutCoursesInput: ["firstName", "lastName", "user"],
    TeacherCreateOrConnectWithoutCoursesInput: ["where", "create"],
    MeetingCreateWithoutCourseInput: ["title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt"],
    MeetingCreateOrConnectWithoutCourseInput: ["where", "create"],
    LessonCreateWithoutCourseInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles"],
    LessonCreateOrConnectWithoutCourseInput: ["where", "create"],
    TopicUpsertWithoutCoursesInput: ["update", "create"],
    TopicUpdateWithoutCoursesInput: ["name", "years", "department", "students"],
    AssignmentUpsertWithWhereUniqueWithoutCourseInput: ["where", "update", "create"],
    AssignmentUpdateWithWhereUniqueWithoutCourseInput: ["where", "data"],
    AssignmentUpdateManyWithWhereWithoutCourseInput: ["where", "data"],
    AssignmentScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "published", "content", "description", "courseId"],
    TeacherUpsertWithoutCoursesInput: ["update", "create"],
    TeacherUpdateWithoutCoursesInput: ["firstName", "lastName", "user"],
    MeetingUpsertWithWhereUniqueWithoutCourseInput: ["where", "update", "create"],
    MeetingUpdateWithWhereUniqueWithoutCourseInput: ["where", "data"],
    MeetingUpdateManyWithWhereWithoutCourseInput: ["where", "data"],
    MeetingScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt", "courseId"],
    LessonUpsertWithWhereUniqueWithoutCourseInput: ["where", "update", "create"],
    LessonUpdateWithWhereUniqueWithoutCourseInput: ["where", "data"],
    LessonUpdateManyWithWhereWithoutCourseInput: ["where", "data"],
    LessonScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "published", "createdAt", "updatedAt", "content", "courseId"],
    CourseCreateWithoutAssignmentsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "teacher", "meetings", "lessons"],
    CourseCreateOrConnectWithoutAssignmentsInput: ["where", "create"],
    SubmissionCreateWithoutAssignmentInput: ["createdAt", "updatedAt", "content", "student", "submissionFiles"],
    SubmissionCreateOrConnectWithoutAssignmentInput: ["where", "create"],
    AssignmentFileCreateWithoutAssignmentInput: ["link", "type", "createdAt", "updatedAt", "name"],
    AssignmentFileCreateOrConnectWithoutAssignmentInput: ["where", "create"],
    CourseUpsertWithoutAssignmentsInput: ["update", "create"],
    CourseUpdateWithoutAssignmentsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "teacher", "meetings", "lessons"],
    SubmissionUpsertWithWhereUniqueWithoutAssignmentInput: ["where", "update", "create"],
    SubmissionUpdateWithWhereUniqueWithoutAssignmentInput: ["where", "data"],
    SubmissionUpdateManyWithWhereWithoutAssignmentInput: ["where", "data"],
    AssignmentFileUpsertWithWhereUniqueWithoutAssignmentInput: ["where", "update", "create"],
    AssignmentFileUpdateWithWhereUniqueWithoutAssignmentInput: ["where", "data"],
    AssignmentFileUpdateManyWithWhereWithoutAssignmentInput: ["where", "data"],
    AssignmentFileScalarWhereInput: ["AND", "OR", "NOT", "id", "link", "type", "createdAt", "updatedAt", "name", "assignmentId"],
    CourseCreateWithoutMeetingsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "lessons"],
    CourseCreateOrConnectWithoutMeetingsInput: ["where", "create"],
    CourseUpsertWithoutMeetingsInput: ["update", "create"],
    CourseUpdateWithoutMeetingsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "lessons"],
    StudentCreateWithoutSubmissionsInput: ["year", "firstName", "lastName", "user", "topic"],
    StudentCreateOrConnectWithoutSubmissionsInput: ["where", "create"],
    AssignmentCreateWithoutSubmissionsInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "assignmentFiles"],
    AssignmentCreateOrConnectWithoutSubmissionsInput: ["where", "create"],
    SubmissionFileCreateWithoutSubmissionInput: ["createdAt", "updatedAt", "link", "name", "type"],
    SubmissionFileCreateOrConnectWithoutSubmissionInput: ["where", "create"],
    StudentUpsertWithoutSubmissionsInput: ["update", "create"],
    StudentUpdateWithoutSubmissionsInput: ["year", "firstName", "lastName", "user", "topic"],
    AssignmentUpsertWithoutSubmissionsInput: ["update", "create"],
    AssignmentUpdateWithoutSubmissionsInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "assignmentFiles"],
    SubmissionFileUpsertWithWhereUniqueWithoutSubmissionInput: ["where", "update", "create"],
    SubmissionFileUpdateWithWhereUniqueWithoutSubmissionInput: ["where", "data"],
    SubmissionFileUpdateManyWithWhereWithoutSubmissionInput: ["where", "data"],
    SubmissionFileScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "link", "name", "type", "submissionId"],
    AssignmentCreateWithoutAssignmentFilesInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "submissions"],
    AssignmentCreateOrConnectWithoutAssignmentFilesInput: ["where", "create"],
    AssignmentUpsertWithoutAssignmentFilesInput: ["update", "create"],
    AssignmentUpdateWithoutAssignmentFilesInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "course", "submissions"],
    LessonFileCreateWithoutLessonInput: ["createdAt", "updatedAt", "type", "name", "link"],
    LessonFileCreateOrConnectWithoutLessonInput: ["where", "create"],
    CourseCreateWithoutLessonsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "meetings"],
    CourseCreateOrConnectWithoutLessonsInput: ["where", "create"],
    LessonFileUpsertWithWhereUniqueWithoutLessonInput: ["where", "update", "create"],
    LessonFileUpdateWithWhereUniqueWithoutLessonInput: ["where", "data"],
    LessonFileUpdateManyWithWhereWithoutLessonInput: ["where", "data"],
    LessonFileScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "type", "name", "link", "lessonId"],
    CourseUpsertWithoutLessonsInput: ["update", "create"],
    CourseUpdateWithoutLessonsInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "teacher", "meetings"],
    LessonCreateWithoutLessonFilesInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "course"],
    LessonCreateOrConnectWithoutLessonFilesInput: ["where", "create"],
    LessonUpsertWithoutLessonFilesInput: ["update", "create"],
    LessonUpdateWithoutLessonFilesInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "course"],
    SubmissionCreateWithoutSubmissionFilesInput: ["createdAt", "updatedAt", "content", "student", "assignment"],
    SubmissionCreateOrConnectWithoutSubmissionFilesInput: ["where", "create"],
    SubmissionUpsertWithoutSubmissionFilesInput: ["update", "create"],
    SubmissionUpdateWithoutSubmissionFilesInput: ["createdAt", "updatedAt", "content", "student", "assignment"],
    SubmissionUpdateWithoutStudentInput: ["createdAt", "updatedAt", "content", "assignment", "submissionFiles"],
    CourseUpdateWithoutTeacherInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "topic", "assignments", "meetings", "lessons"],
    TopicUpdateWithoutDepartmentInput: ["name", "years", "courses", "students"],
    CourseUpdateWithoutTopicInput: ["title", "year", "description", "published", "createdAt", "updatedAt", "assignments", "teacher", "meetings", "lessons"],
    StudentUpdateWithoutTopicInput: ["year", "firstName", "lastName", "user", "submissions"],
    AssignmentUpdateWithoutCourseInput: ["title", "createdAt", "updatedAt", "published", "content", "description", "submissions", "assignmentFiles"],
    MeetingUpdateWithoutCourseInput: ["title", "description", "date", "startTime", "duration", "link", "createdAt", "updatedAt"],
    LessonUpdateWithoutCourseInput: ["title", "description", "published", "createdAt", "updatedAt", "content", "lessonFiles"],
    SubmissionUpdateWithoutAssignmentInput: ["createdAt", "updatedAt", "content", "student", "submissionFiles"],
    AssignmentFileUpdateWithoutAssignmentInput: ["link", "type", "createdAt", "updatedAt", "name"],
    SubmissionFileUpdateWithoutSubmissionInput: ["createdAt", "updatedAt", "link", "name", "type"],
    LessonFileUpdateWithoutLessonInput: ["createdAt", "updatedAt", "type", "name", "link"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
